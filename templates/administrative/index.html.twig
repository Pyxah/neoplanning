{% extends 'base.html.twig' %}

{% block title %}Gardes Administratives{% endblock %}
{% block navbar %} {{ parent() }} {% endblock %}
{% block content %}
    <div class="navbar-sec">
        <ul id="nav-sec">
            <li><a href="/">Planning Home</a></li>
            <li><a href="/gadmin">Gardes Administratives</a></li>
            <li><a href="/med">Gardes Médicales</a></li>
            <li><a href="/tech">Gardes Techniques</a></li>
            <li><a href="/soins">Gardes des Soins</a></li>
            <li><a href="/ssiad">Astreintes SSIAD</a></li>
            <li><a href="/rouvray">Garde de soins - site Le Rouvray</a></li>
        </ul>
    </div>

    <div id="calendrier">



    </div>

{% endblock %}

{% block javascripts %}
    <script>
       /* let DateTime = luxon.DateTime;
        dt = DateTime.now();
        dt.setLocale('fr').toLocaleString(DateTime.DATETIME_FULL);

        const DateTime = luxon.DateTime;
        dt = DateTime.now();
        dt.setLocale('fr').toLocaleString(DateTime.DATETIME_FULL); //=> '20 avril 2017 à 11:32 UTC−4'

        function getCalendarFormat(myDateTime, now) {
            var diff = myDateTime.diff(now.startOf("day"), 'days').as('days');
            return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        }

        function myCalendar(dt1, dt2, obj){
            const format = getCalendarFormat(dt1, dt2) || 'sameElse';
            return dt1.toFormat(obj[format]);
        }

        const now = DateTime.local();
        const fmtObj = {
            sameDay: "'Aujourdhui'",
            nextDay: "'Demain'",
            nextWeek: 'EEEE',
            lastDay: "'Hier'",
            lastWeek: "'Last' EEEE",
            sameElse: 'dd/MM/yyyy'
        };

        // Some test values
        [ now,
            now.plus({days: 1}),
            now.plus({days: 4}),
            now.minus({days: 1}),
            now.minus({days: 4}),
            now.minus({days: 20}),
        ].forEach((k) => {
            console.log( myCalendar(now, k, fmtObj) );
        });

       let now = moment.locale('fr');
       let daysInMonth = moment().daysInMonth();
       let startOfMonth = moment().startOf('month');
       let startOfMonthDay = startOfMonth.getDay;

       console.log(daysInMonth);
       console.log(startOfMonth);
       console.log(startOfMonthDay);
*/
       moment.locale('fr');
       moment.updateLocale('fr', {
           week: {
               dow: 7
           },
           months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
           monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
           monthsParseExact : true,
           weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
           weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
           weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
           weekdaysParseExact : true,
           longDateFormat : {
               LT : 'HH:mm',
               LTS : 'HH:mm:ss',
               L : 'DD/MM/YYYY',
               LL : 'D MMMM YYYY',
               LLL : 'D MMMM YYYY HH:mm',
               LLLL : 'dddd D MMMM YYYY HH:mm'
           },
           calendar : {
               sameDay : '[Aujourd’hui à] LT',
               nextDay : '[Demain à] LT',
               nextWeek : 'dddd [à] LT',
               lastDay : '[Hier à] LT',
               lastWeek : 'dddd [dernier à] LT',
               sameElse : 'L'
           },
           relativeTime : {
               future : 'dans %s',
               past : 'il y a %s',
               s : 'quelques secondes',
               m : 'une minute',
               mm : '%d minutes',
               h : 'une heure',
               hh : '%d heures',
               d : 'un jour',
               dd : '%d jours',
               M : 'un mois',
               MM : '%d mois',
               y : 'un an',
               yy : '%d ans'
           },
           dayOfMonthOrdinalParse : /\d{1,2}(er|e)/,
           ordinal : function (number) {
               return number + (number === 1 ? 'er' : 'e');
           },
           meridiemParse : /PD|MD/,
           isPM : function (input) {
               return input.charAt(0) === 'M';
           },
           // In case the meridiem units are not separated around 12, then implement
           // this function (look at locale/id.js for an example).
           // meridiemHour : function (hour, meridiem) {
           //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;
           // },
           meridiem : function (hours, minutes, isLower) {
               return hours < 12 ? 'PD' : 'MD';
           }
       });
       let now = moment();
       console.log(now);
       console.log(moment().daysInMonth());
       console.log(moment().weekday());

    </script>
{% endblock %}